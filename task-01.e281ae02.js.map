{"version":3,"sources":["js/task-01.js"],"names":["require","delay","ms","Promise","resolve","setTimeout","logger","time","console","log","concat","then"],"mappings":";;;AAqB0B,aArB1BA,QAAA,qBAQA,IAAMC,EAAQ,SAAAC,GACZ,OAAO,IAAIC,QAAQ,SAAAC,GACjBC,WAAW,WACTD,EAAQF,IACPA,MAIDI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAGC,kBAAAA,OAAmBH,EAAQ,QAG7DN,EAAM,KAAMU,KAAKL,GACjBL,EAAM,KAAMU,KAAKL,GACjBL,EAAM,MAAMU,KAAKL","file":"task-01.e281ae02.js","sourceRoot":"..\\src","sourcesContent":["import '../css/common.css';\r\n\r\n/*\r\n * Напиши функцию `delay(ms)`, которая возвращает промис, переходящий в состояние\r\n * `\"resolved\"` через `ms` миллисекунд. Значением исполнившегося промиса должно\r\n * быть то кол-во миллисекунд, которое передали во время вызова функции `delay`.\r\n */\r\n\r\nconst delay = ms => {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve(ms);\r\n    }, ms);\r\n  });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n"]}