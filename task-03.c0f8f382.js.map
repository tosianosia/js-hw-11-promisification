{"version":3,"sources":["js/task-03.js"],"names":["require","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","id","delay","Promise","resolve","reject","canProcess","setTimeout","time","logSuccess","_ref","console","log","concat","logError","warn","amount","then","catch"],"mappings":";;;AA2EkB,aA3ElBA,QAAA,qBAQA,IAAMC,EAA4B,SAACC,EAAKC,GACtC,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAiBhDK,EAAkB,SAAAC,GACtB,IAAQC,EAAOD,EAAPC,GACFC,EAAQT,EAA0B,IAAK,KAE7C,OAAO,IAAIU,QAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAaV,KAAKE,SAAW,GAEnCS,WAAW,WACLD,GACFF,EAAQ,CAAEH,GAAAA,EAAIO,KAAMN,IAGtBG,EAAOJ,IACNC,MAIDO,EAAa,SAAHC,GAAqB,IAAfT,EAAES,EAAFT,GAAIO,EAAIE,EAAJF,KACxBG,QAAQC,IAAGC,eAAAA,OAAgBZ,EAAEY,kBAAAA,OAAiBL,EAAQ,QAGlDM,EAAW,SAAAb,GACfU,QAAQI,KAAIF,gCAAAA,OAAiCZ,EAA6B,+BAa5EF,EAAgB,CAAEE,GAAI,GAAIe,OAAQ,MAC/BC,KAAKR,GACLS,MAAMJ,GAETf,EAAgB,CAAEE,GAAI,GAAIe,OAAQ,MAC/BC,KAAKR,GACLS,MAAMJ,GAETf,EAAgB,CAAEE,GAAI,GAAIe,OAAQ,KAC/BC,KAAKR,GACLS,MAAMJ,GAETf,EAAgB,CAAEE,GAAI,GAAIe,OAAQ,MAC/BC,KAAKR,GACLS,MAAMJ","file":"task-03.c0f8f382.js","sourceRoot":"..\\src","sourcesContent":["import '../css/common.css';\r\n\r\n/*\r\n * Перепиши функцию `makeTransaction()` так, чтобы она не использовала\r\n * callback-функции `onSuccess` и `onError`, а принимала всего один параметр\r\n * `transaction` и возвращала промис.\r\n */\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\n// const makeTransaction = (transaction, onSuccess, onError) => {\r\n//   const delay = randomIntegerFromInterval(200, 500);\r\n\r\n//   setTimeout(() => {\r\n//     const canProcess = Math.random() > 0.3;\r\n\r\n//     if (canProcess) {\r\n//       onSuccess(transaction.id, delay);\r\n//     } else {\r\n//       onError(transaction.id);\r\n//     }\r\n//   }, delay);\r\n// };\r\n\r\nconst makeTransaction = transaction => {\r\n  const { id } = transaction;\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const canProcess = Math.random() > 0.3;\r\n\r\n    setTimeout(() => {\r\n      if (canProcess) {\r\n        resolve({ id, time: delay });\r\n      }\r\n\r\n      reject(id);\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Работает так\r\n */\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n"]}